plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
	//   동적쿼리 querydsl 관련 설정 추가
//	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}

group = 'org.zerock'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.2.1'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//데이터베이스에서 데이터 가져오기 위한 의존성 주입
	implementation 'mysql:mysql-connector-java:8.0.11'

	//lombok test
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	//@Valid
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	//log4j2
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	//ModelMapper
	implementation 'org.modelmapper:modelmapper:3.1.0'
	//swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	// file upload thumbnail
	implementation 'net.coobird:thumbnailator:0.4.16'
	//로그인 회원가입 시큐리티
	implementation 'org.springframework.boot:spring-boot-starter-security'

	//thymeleaf에서 인증 정보 활용
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE'
	//카카오 소셜로그인을 위한 의존성 주입
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	//오토리로드설정
	developmentOnly 'org.springframework.boot:spring-boot-devtools'



	//데이터베이스에서 데이터 가져오기 위한 의존성 주입
	implementation 'mysql:mysql-connector-java:8.0.11'


	//api의존성
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'org.apache.httpcomponents:httpclient:4.5.13'
	implementation 'com.omertron:themoviedbapi:4.2'

	//게시판추가
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.0'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'       /* Thymeleaf Layout */
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'  /* Log4JDBC */
	implementation group: 'org.springframework.security', name: 'spring-security-crypto', version: '5.7.6'  /* spring-security-crypto */
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'



}
configurations {
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
// 이하 querydsl 설정
// querydsl에서 사용할 경로 설정
def querydslDir = "$buildDir/generated/querydsl"
// JPA 사용 여부와 사용할 경로를 설정
//querydsl {
//	jpa = true
//	querydslSourcesDir = querydslDir
//}
// build 시 사용할 sourceSet 추가
sourceSets {
	main.java.srcDir querydslDir
}
// querydsl 컴파일시 사용할 옵션 설정
//compileQuerydsl{
//	options.annotationProcessorPath = configurations.querydsl
//}
// querydsl 이 compileClassPath 를 상속하도록 설정
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}
// querydsl설정 끝

clean.doLast {
	file(querydslDir).deleteDir()
}